from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


def setup_handlers(router: Router, manager: 'LobbyManager'):
    @router.message(Command("create_lobby"))
    async def create_lobby(message: types.Message):
        lobby = await manager.create_lobby(message.from_user.id)
        if not lobby:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏!")
            return

        await message.answer(
            f"üéÆ –õ–æ–±–±–∏ {lobby.id} —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞: /join {lobby.id}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å",
                    url=f"tg://msg?text=/join {lobby.id}"
                )]
            ])
        )

    @router.message(Command("join"))
    async def join_lobby(message: types.Message):
        try:
            lobby_id = int(message.text.split()[1])
            success = await manager.join_lobby(message.from_user.id, lobby_id)

            if not success:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏")
                return

            lobby = manager.get_user_lobby(message.from_user.id)
            await lobby.broadcast(
                f"üéâ –ò–≥—Ä–æ–∫ {message.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!",
                exclude_user=message.from_user.id
            )

            await message.answer(
                f"‚úÖ –í—ã –≤ –ª–æ–±–±–∏ {lobby_id}\n"
                f"–ò–≥—Ä–æ–∫–æ–≤: {len(lobby.players)}/2\n"
                f"–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: /start_game"
            )
        except (IndexError, ValueError):
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /join <ID_–ª–æ–±–±–∏>")

    @router.message(Command("start_game"))
    async def start_game(message: types.Message):
        lobby = manager.get_user_lobby(message.from_user.id)
        if not lobby:
            await message.answer("‚ùå –í—ã –Ω–µ –≤ –ª–æ–±–±–∏!")
            return

        if len(lobby.players) < 2:
            await message.answer("‚ùå –ù—É–∂–Ω–æ 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
            return

        if await lobby.start_game():
            await message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")

    @router.callback_query(F.data.startswith("play_"))
    async def game_action(callback: types.CallbackQuery):
        try:
            lobby = manager.get_user_lobby(callback.from_user.id)
            if not lobby or not lobby.game:
                await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            action = callback.data.replace("play_", "")
            if not action:
                await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

            success = await lobby.process_action(callback.from_user.id, action)

            if success:
                await lobby._update_ui_all()
                await callback.answer()
            else:
                await callback.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
        except Exception as e:
            print(f"Game action error: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)

    @router.message()
    async def lobby_chat(message: types.Message):
        lobby = manager.get_user_lobby(message.from_user.id)
        if not lobby:
            await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –≤ –ª–æ–±–±–∏. –°–æ–∑–¥–∞–π—Ç–µ: /create_lobby")
            return

        if lobby.game:
            return

        await lobby.broadcast(
            f"{message.from_user.full_name}: {message.text}",
            exclude_user=message.from_user.id
        )
